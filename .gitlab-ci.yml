# MoeAI-C GitLab CI/CD Configuration File (最终版带busybox修复)

stages:
  - build
  - qemu-test
  - documentation
  - changelog
  - deploy

default:
  before_script:
    - |
      export KERNEL_DIR="/opt/kernels/linux-6.5.7"
      export QEMU_KERNEL="${KERNEL_DIR}/arch/x86/boot/bzImage"
      echo "Using prebuilt kernel at ${KERNEL_DIR}"

build_module:
  stage: build
  script:
    - |
      set -e
      mkdir -p testenv artifacts kernel-src
      echo "Building CLI tool and modules..."
      make cli
      make all
      make qemu-build
  artifacts:
    paths:
      - build/bin/moectl
      - moeai.ko
    expire_in: 1 week
    when: on_success
  tags:
    - moeai
    - linux
  allow_failure: true

qemu_test:
  stage: qemu-test
  needs:
    - build_module
  script:
    - |
      set -e
      echo "Starting QEMU test..."
      export QEMU_KERNEL="/opt/kernels/linux-6.5.7/arch/x86/boot/bzImage"
      export QEMU_INITRD="$(pwd)/artifacts/minimal_initramfs.cpio.gz"

      mkdir -p testenv/initramfs/{bin,lib/modules,usr/bin,dev,proc,sys}
      cp moeai.ko testenv/initramfs/lib/modules/
      cp build/bin/moectl testenv/initramfs/usr/bin/
      chmod 755 testenv/initramfs/usr/bin/moectl

      echo "Creating /init script..."
      cat > testenv/initramfs/init <<'EOF'
      #!/bin/sh
      mount -t proc none /proc
      mount -t sysfs none /sys
      echo "[init] MoeAI-C Test Environment Booted"
      exec /bin/sh
      EOF
      chmod +x testenv/initramfs/init

      echo "Copying busybox as /bin/sh..."
      if [ -x /bin/busybox ]; then
        cp /bin/busybox testenv/initramfs/bin/sh
      else
        echo "Error: busybox not found!"
        exit 1
      fi
      chmod +x testenv/initramfs/bin/sh

      echo "Creating device nodes..."
      sudo mknod testenv/initramfs/dev/console c 5 1 || true
      sudo mknod testenv/initramfs/dev/tty0 c 4 0 || true
      sudo mknod testenv/initramfs/dev/null c 1 3 || true

      echo "Packing initramfs..."
      (cd testenv/initramfs && find . -print0 | cpio --null -ov --format=newc | gzip -9 > ../minimal_initramfs.cpio.gz)
      mv testenv/minimal_initramfs.cpio.gz "${QEMU_INITRD}"

      echo "Verifying contents of initramfs:"
      zcat "${QEMU_INITRD}" | cpio -itv | grep init

      echo "Launching QEMU..."
      qemu-system-x86_64 -m 1024 -kernel "${QEMU_KERNEL}" -initrd "${QEMU_INITRD}" -append "rdinit=/init console=ttyS0" -nographic

      echo "QEMU test completed."
  artifacts:
    paths:
      - artifacts/
    when: always
  tags:
    - moeai
    - linux
  allow_failure: true

generate_docs:
  stage: documentation
  script:
    - sudo apt-get install -y doxygen graphviz || true
    - doxygen Doxyfile || echo "Generating dummy documentation"
    - mkdir -p docs/html
    - echo "<html><body><h1>MoeAI-C Documentation</h1></body></html>" > docs/html/index.html
  artifacts:
    paths:
      - docs/html
    expire_in: 1 month
  only:
    - master
  tags:
    - moeai
    - linux
  allow_failure: true

generate_changelog:
  stage: changelog
  script:
    - echo "Generating CHANGELOG..."
    - echo "# MoeAI-C Changelog" > CHANGELOG
    - echo "" >> CHANGELOG
    - echo "## $(date +%Y-%m-%d)" >> CHANGELOG
    - git log --pretty=format:"* %s (%h)" -n 20 >> CHANGELOG
  artifacts:
    paths:
      - CHANGELOG
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  tags:
    - moeai
    - linux
  allow_failure: true

pages:
  stage: deploy
  dependencies:
    - generate_docs
  script:
    - mkdir -p public
    - cp -r docs/html/* public/ || echo "No documentation to copy"
  artifacts:
    paths:
      - public
  only:
    - master
  tags:
    - moeai
    - linux
