# MoeAI-C GitLab CI/CD Configuration File (优化版)

stages:
  - build
  - qemu-test
  - documentation
  - changelog
  - deploy

default:
  before_script:
    - |
      export KERNEL_DIR="/opt/kernels/linux-6.5.7"
      export QEMU_KERNEL="${KERNEL_DIR}/arch/x86/boot/bzImage"
      echo "Using prebuilt kernel at ${KERNEL_DIR}"

# Build kernel module and prepare QEMU environment
build_module:
  stage: build
  script:
    - set -e
    - mkdir -p testenv artifacts kernel-src

    # Set up kernel 
    # 设置预编译内核权限
    - |
      export KERNEL_DIR="/opt/kernels/linux-6.5.7"
      export QEMU_KERNEL="${KERNEL_DIR}/arch/x86/boot/bzImage"
      echo "Using prebuilt kernel at ${KERNEL_DIR}"
      if [ ! -f "${QEMU_KERNEL}" ]; then
        echo "Error: Prebuilt kernel not found at ${KERNEL_DIR}"
        exit 1
      fi
      echo "Setting kernel file permissions..."
      sudo chmod a+r "${QEMU_KERNEL}"
      sudo chmod a+r -R "${KERNEL_DIR}"

    # Build CLI tool first with proper linking
    - echo "Building CLI tool..."
    - make cli
    
    # Build all modules
    - echo "Building all modules..."
    - make all
    - make qemu-build
    
    # Create device nodes with sudo
    - echo "Creating device nodes with sudo..."
    - mkdir -p testenv/ci_init_fs/dev
    - sudo mknod testenv/ci_init_fs/dev/console c 5 1 || true
    - sudo mknod testenv/ci_init_fs/dev/tty0 c 4 0 || true
    - sudo mknod testenv/ci_init_fs/dev/tty1 c 4 1 || true
    - sudo mknod testenv/ci_init_fs/dev/null c 1 3 || true
    - echo "Device nodes created:"
    - ls -l testenv/ci_init_fs/dev/
    
    
    # Build initramfs with explicit paths
    - |
      echo "Building initramfs..."
      export QEMU_KERNEL="/opt/kernels/linux-6.5.7/arch/x86/boot/bzImage"
      mkdir -p artifacts
      export QEMU_INITRD="$(pwd)/artifacts/minimal_initramfs.cpio.gz"
      echo "Generating initramfs with:"
      echo "Kernel: ${QEMU_KERNEL}"
      echo "Output: ${QEMU_INITRD}"
      echo "Config: scripts/qemu/config/ci.conf"
      echo "Init: scripts/qemu/init_scripts/ci_init.sh"
      # Prepare all required files
      mkdir -p scripts/qemu/build/bin
      cp build/bin/moectl scripts/qemu/build/bin/
      cp moeai.ko scripts/qemu/
      
      # Generate compressed initramfs with minimal content
      cd scripts/qemu
      OUTPUT_FILE="minimal_initramfs.cpio.gz"
      KERNEL="${QEMU_KERNEL}" \
      INITRD="${OUTPUT_FILE}" \
      CONFIG="config/ci.conf" \
      INIT_SCRIPT="init_scripts/ci_init.sh" \
      MODULE="moeai.ko" \
      COMPRESS_LEVEL=9 \
      MINIMAL_MODE=1 \
      ./gen_initramfs.sh
      
      # Check file size
      FILE_SIZE=$(stat -c%s "${OUTPUT_FILE}")
      MAX_SIZE=$((100 * 1024 * 1024)) # 100MB
      if [ "${FILE_SIZE}" -gt "${MAX_SIZE}" ]; then
        echo "Error: Initramfs file too large (${FILE_SIZE} bytes)"
        exit 1
      fi
      
      # Move generated file to artifacts directory
      if [ -f "${OUTPUT_FILE}" ]; then
        mv "${OUTPUT_FILE}" "${QEMU_INITRD}"
        echo "Initramfs moved to ${QEMU_INITRD}"
      else
        echo "Error: gen_initramfs.sh did not generate ${OUTPUT_FILE}"
        ls -l
        exit 1
      fi
      cd -
      echo "Initramfs successfully generated at ${QEMU_INITRD}"

  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - build/
    policy: pull-push

  artifacts:
    paths:
      - build/bin/moectl
      - moeai.ko
    expire_in: 1 week
    when: on_success
  tags:
    - moeai
    - linux
  allow_failure: true

# QEMU test stage
qemu_test:
  stage: qemu-test
  needs:
    - build_module
  script:
    - set -e
    - echo "Starting QEMU test..."
    - export QEMU_KERNEL="/opt/kernels/linux-6.5.7/arch/x86/boot/bzImage"
    - mkdir -p artifacts
    - export QEMU_INITRD="$(pwd)/artifacts/minimal_initramfs.cpio.gz"

    - if [ ! -f "${QEMU_KERNEL}" ]; then echo "Error bzImage not found at ${QEMU_KERNEL}"; exit 1; fi

    # Prepare environment and generate initramfs
    - mkdir -p scripts/qemu/build/bin
    - cp build/bin/moectl scripts/qemu/build/bin/
    - cp moeai.ko scripts/qemu/
    
    # Prepare test environment following Makefile's qemu-prepare
    - mkdir -p testenv/initramfs/{bin,lib/modules,usr/bin,dev,proc,sys}
    
    # Copy module and CLI tool
    - cp moeai.ko testenv/initramfs/lib/modules/
    - cp build/bin/moectl testenv/initramfs/usr/bin/
    - chmod 755 testenv/initramfs/usr/bin/moectl
    - cp build/bin/moectl testenv/initramfs/bin/
    - chmod 755 testenv/initramfs/bin/moectl
    
    # remove old init
    - rm -f testenv/initramfs/init

    # Create complete init script with testing logic
    - >
      cat > testenv/initramfs/init <<'EOF'
      #!/bin/sh
      # CI environment specific init script - simplified version
      # Automated testing: load module, run self-test, report results, exit

      # Minimal environment compatible version

      # First mount basic filesystems
      mount -t proc none /proc
      mount -t sysfs none /sys
      mount -t devtmpfs none /dev 2>/dev/null

      # Simple logging function that doesn't depend on external commands
      log() {
          echo "$@"
      }

      log "==============================================="
      log "MoeAI-C CI Test Environment"
      log "Automated test sequence starting"
      log "==============================================="

      # Set exit status codes
      SUCCESS=0
      FAILURE=1
      ERROR=2
      STATUS=$SUCCESS

      # Correct procfs path
      PROCFS_ROOT="/proc/moeai"

      # Function to ensure shutdown happens no matter what
      shutdown_qemu() {
          log "[init] Shutting down QEMU virtual machine..."
          # Enable sysrq
          echo 1 > /proc/sys/kernel/sysrq 2>/dev/null
          # Sync filesystems
          echo s > /proc/sysrq-trigger 2>/dev/null
          # Wait for sync to complete
          sleep 1
          # Power off immediately
          echo o > /proc/sysrq-trigger 2>/dev/null
          
          # Should never reach here
          while true; do
              sleep 60
          done
      }

      # Simplified timeout handler (busybox's sh usually supports this)
      {
          # Force shutdown after 30 seconds
          sleep 30
          log "[Timeout] Test timed out, forcing shutdown..."
          shutdown_qemu
      } &

      # Set language environment before loading module
      # Language function loader
      get_msg() {
          key=$1
          # Get message from language system, fallback to English if failed
          msg=$(lang_get "$key" 2>/dev/null || echo "$key")
          echo "$msg"
      }

      log "$(get_msg LANG_INIT_SETTING_ENGLISH)"
      export MOEAI_LANG=en

      log "$(get_msg LANG_TEST_LOADING_MODULE)"
      if insmod /lib/modules/moeai.ko language=en 2>/dev/null; then
          log "$(get_msg LANG_TEST_MODULE_LOADED)"
          
          # Check initialization messages (without using tail)
          log "Checking dmesg initialization messages:"
          dmesg | grep -E "MoeAI|moeai" 2>/dev/null || log "No relevant initialization messages found"
      else
          log "[FAILED] Module load failed"
          STATUS=$FAILURE
      fi

          log "[TEST] Verifying procfs interface..."
      if [ -d "$PROCFS_ROOT" ]; then
          log "Found procfs root directory: $PROCFS_ROOT"
          ls -la $PROCFS_ROOT 2>/dev/null || log "Failed to list procfs directory contents"
          
          if [ -f "${PROCFS_ROOT}/status" ] && [ -f "${PROCFS_ROOT}/control" ]; then
              log "[PASSED] procfs interface available"
              log "status file contents:"
              cat ${PROCFS_ROOT}/status 2>/dev/null || log "Failed to read status file"
          else
              log "[FAILED] procfs interface files incomplete"
              STATUS=$FAILURE
          fi
      else
          log "[FAILED] procfs root directory ($PROCFS_ROOT) not found"
          log "Checking all contents under /proc:"
          ls -la /proc | grep -E "moe|ai" 2>/dev/null || log "No relevant procfs directory found"
          STATUS=$FAILURE
      fi

      log "[TEST] Running module self-test..."
      if [ -f "${PROCFS_ROOT}/control" ]; then
          # Attempt to run self-test
          log "Writing selftest to control file..."
          echo "selftest" > ${PROCFS_ROOT}/control 2>/dev/null
          # Wait for self-test to complete
          sleep 2
          if [ -f "${PROCFS_ROOT}/selftest" ]; then
              log "[SELF-TEST RESULTS]"
              cat ${PROCFS_ROOT}/selftest 2>/dev/null || log "Failed to read selftest results"
              if grep -q "FAIL" ${PROCFS_ROOT}/selftest 2>/dev/null; then
                  log "[FAILED] Self-test reported errors"
                  STATUS=$FAILURE
              else
                  log "[PASSED] Self-test completed with no critical errors"
              fi
          else
              log "[FAILED] Could not read self-test results, selftest file missing"
              STATUS=$FAILURE
          fi
      else
          log "[ERROR] Could not trigger self-test, control file missing"
          STATUS=$ERROR
      fi

      # Unload module
      if grep -q "moeai" /proc/modules 2>/dev/null; then
          log "[TEST] Unloading module..."
          if rmmod moeai 2>/dev/null; then
              log "[PASSED] Module unloaded successfully"
          else
              log "[WARNING] Module unload failed"
          fi
      else
          log "[WARNING] Module not loaded, skipping unload test"
      fi

      log "----------------------------------------"
      log "Testing completed, status code: $STATUS"

      # Show results summary
      log "==============================================="
      log "Test results summary:"
      dmesg | grep -E "MoeAI|moeai|error|fail" 2>/dev/null | head -n 15 || log "No relevant logs found"
      log "==============================================="

      log "[init] Test sequence completed, shutting down in 3 seconds..."
      sleep 3

      # 关闭QEMU
      shutdown_qemu
      EOF
    - chmod +x testenv/initramfs/init
    - chmod +x testenv/initramfs/init
    
    # Create device nodes
    - sudo mknod testenv/initramfs/dev/console c 5 1
    - sudo mknod testenv/initramfs/dev/tty0 c 4 0
    - sudo mknod testenv/initramfs/dev/null c 1 3
    
    # Pack initramfs following Makefile's qemu-pack
    - cd testenv/initramfs && find . -print0 | cpio --null -ov --format=newc 2>/dev/null | gzip -9 > ../minimal_initramfs.cpio.gz
    - cd ../..
    - mv testenv/minimal_initramfs.cpio.gz "${QEMU_INITRD}"
    
    # Verify initramfs
    - zcat "${QEMU_INITRD}" | cpio -itv
    
    # check if init is valid
    - echo "Checking init script..."
    - cat testenv/initramfs/init

    # 启动 QEMU
    - qemu-system-x86_64 -m 1024 -kernel "${QEMU_KERNEL}" -initrd "${QEMU_INITRD}" -append "rdinit=/init console=ttyS0" -nographic

    - echo "QEMU test completed."
  artifacts:
    paths:
      - artifacts/
    when: always
  tags:
    - moeai
    - linux
  allow_failure: true

# Documentation generation
generate_docs:
  stage: documentation
  script:
    - sudo apt-get install -y doxygen graphviz || true
    - doxygen Doxyfile || echo "Fallback Generating dummy docs"
    - mkdir -p docs/html
    - echo "<html><body><h1>MoeAI-C Documentation</h1></body></html>" > docs/html/index.html
  artifacts:
    paths:
      - docs/html
    expire_in: 1 month
  only:
    - master
  tags:
    - moeai
    - linux
  allow_failure: true

# Changelog generation (optional)
generate_changelog:
  stage: changelog
  script:
    - echo "Generating CHANGELOG (dummy placeholder)..."
    - echo "# MoeAI-C Changelog" > CHANGELOG
    - echo "" >> CHANGELOG
    - echo "## $(date +%Y-%m-%d)" >> CHANGELOG
    - git log --pretty=format:"* %s (%h)" -n 20 >> CHANGELOG
  artifacts:
    paths:
      - CHANGELOG
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  tags:
    - moeai
    - linux
  allow_failure: true

# GitLab Pages deployment
pages:
  stage: deploy
  dependencies:
    - generate_docs
  script:
    - mkdir -p public
    - cp -r docs/html/* public/
  artifacts:
    paths:
      - public
  only:
    - master
  tags:
    - moeai
    - linux
