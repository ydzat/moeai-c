# MoeAI-C GitLab CI/CD Configuration File (优化版)

stages:
  - build
  - qemu-test
  - documentation
  - changelog
  - deploy

default:
  before_script:
    - |
      export KERNEL_DIR="/opt/kernels/linux-6.5.7"
      export QEMU_KERNEL="${KERNEL_DIR}/arch/x86/boot/bzImage"
      echo "Using prebuilt kernel at ${KERNEL_DIR}"

# Build kernel module and prepare QEMU environment
build_module:
  stage: build
  script:
    - set -e
    - mkdir -p testenv artifacts kernel-src

    # 设置预编译内核权限
    - |
      export KERNEL_DIR="/opt/kernels/linux-6.5.7"
      export QEMU_KERNEL="${KERNEL_DIR}/arch/x86/boot/bzImage"
      echo "Using prebuilt kernel at ${KERNEL_DIR}"
      if [ ! -f "${QEMU_KERNEL}" ]; then
        echo "Error: Prebuilt kernel not found at ${KERNEL_DIR}"
        exit 1
      fi
      echo "Setting kernel file permissions..."
      sudo chmod a+r "${QEMU_KERNEL}"
      sudo chmod a+r -R "${KERNEL_DIR}"

    # Build CLI tool first with proper linking
    - echo "Building CLI tool..."
    - make cli
    
    # Build kernel module
    - echo "Building kernel module..."
    - make qemu-build
    
    # Create device nodes with sudo
    - echo "Creating device nodes with sudo..."
    - mkdir -p testenv/ci_init_fs/dev
    - sudo mknod testenv/ci_init_fs/dev/console c 5 1 || true
    - sudo mknod testenv/ci_init_fs/dev/tty0 c 4 0 || true
    - sudo mknod testenv/ci_init_fs/dev/tty1 c 4 1 || true
    - sudo mknod testenv/ci_init_fs/dev/null c 1 3 || true
    - echo "Device nodes created:"
    - ls -l testenv/ci_init_fs/dev/
    
    # Build initramfs with explicit paths
    - |
      echo "Building initramfs..."
      export QEMU_KERNEL="/opt/kernels/linux-6.5.7/arch/x86/boot/bzImage"
      mkdir -p artifacts
      export QEMU_INITRD="$(pwd)/artifacts/minimal_initramfs.cpio.gz"
      echo "Generating initramfs with:"
      echo "Kernel: ${QEMU_KERNEL}"
      echo "Output: ${QEMU_INITRD}"
      echo "Config: scripts/qemu/config/ci.conf"
      echo "Init: scripts/qemu/init_scripts/ci_init.sh"
      cd scripts/qemu && \
      ./gen_initramfs.sh \
        --kernel "${QEMU_KERNEL}" \
        --initrd "${QEMU_INITRD}" \
        --config ci.conf \
        --init-script init_scripts/ci_init.sh
      cd -
      if [ ! -f "${QEMU_INITRD}" ]; then
        echo "Error: Failed to generate initramfs at ${QEMU_INITRD}"
        exit 1
      fi
      echo "Initramfs successfully generated at ${QEMU_INITRD}"

  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - build/
    policy: pull-push

  artifacts:
    paths:
      - scripts/
      - artifacts/
      - build/
      - testenv/minimal_initramfs.cpio.gz
    expire_in: 1 week
  tags:
    - moeai
    - linux
  allow_failure: true

# QEMU test stage
qemu_test:
  stage: qemu-test
  needs:
    - build_module
  script:
    - set -e
    - echo "Starting QEMU test..."
    - export QEMU_KERNEL="/opt/kernels/linux-6.5.7/arch/x86/boot/bzImage"
    - export QEMU_INITRD="$(pwd)/artifacts/minimal_initramfs.cpio.gz"

    - if [ ! -f "${QEMU_KERNEL}" ]; then echo "Error bzImage not found at ${QEMU_KERNEL}"; exit 1; fi
    - if [ ! -f "${QEMU_INITRD}" ]; then echo "Error initramfs not found at ${QEMU_INITRD}"; exit 1; fi

    # 启动 QEMU（示例脚本，你可以替换成自己的 run_qemu.sh）
    - qemu-system-x86_64 -m 1024 -kernel "${QEMU_KERNEL}" -initrd "${QEMU_INITRD}" -append "rdinit=/init console=ttyS0" -nographic

    - echo "QEMU test completed."
  artifacts:
    paths:
      - artifacts/
    when: always
  tags:
    - moeai
    - linux
  allow_failure: true

# Documentation generation
generate_docs:
  stage: documentation
  script:
    - sudo apt-get install -y doxygen graphviz || true
    - doxygen Doxyfile || echo "Fallback Generating dummy docs"
    - mkdir -p docs/html
    - echo "<html><body><h1>MoeAI-C Documentation</h1></body></html>" > docs/html/index.html
  artifacts:
    paths:
      - docs/html
    expire_in: 1 month
  only:
    - master
  tags:
    - moeai
    - linux
  allow_failure: true

# Changelog generation (optional)
generate_changelog:
  stage: changelog
  script:
    - echo "Generating CHANGELOG (dummy placeholder)..."
    - echo "# MoeAI-C Changelog" > CHANGELOG
    - echo "" >> CHANGELOG
    - echo "## $(date +%Y-%m-%d)" >> CHANGELOG
    - git log --pretty=format:"* %s (%h)" -n 20 >> CHANGELOG
  artifacts:
    paths:
      - CHANGELOG
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  tags:
    - moeai
    - linux
  allow_failure: true

# GitLab Pages deployment
pages:
  stage: deploy
  dependencies:
    - generate_docs
  script:
    - mkdir -p public
    - cp -r docs/html/* public/
  artifacts:
    paths:
      - public
  only:
    - master
  tags:
    - moeai
    - linux
