# MoeAI-C GitLab CI/CD Configuration File (优化版)

stages:
  - build
  - qemu-test
  - documentation
  - changelog
  - deploy

default:
  before_script:
    - export KERNEL_VERSION=6.5.7
    - echo "Current Kernel Version $(uname -r)"
    - sudo apt-get update || apt-get update
    - sudo apt-get install -y gcc make xz-utils build-essential bc flex bison libssl-dev libelf-dev qemu-system-x86 || true
    - sudo rm -f /var/lib/dpkg/lock-frontend || true
    - echo "Warning Could not install exact kernel headers, continuing"

# Build kernel module and prepare QEMU environment
build_module:
  stage: build
  script:
    - set -e
    - mkdir -p testenv artifacts kernel-src

    # 检查缓存中的内核源码
    - echo "Checking for cached kernel source..."
    - if [ -d "kernel-src/linux-${KERNEL_VERSION}" ]; then
        echo "Using cached kernel source"
        ls -l kernel-src/linux-${KERNEL_VERSION}
      else
        echo "Downloading Linux kernel source ${KERNEL_VERSION}..."
        mkdir -p kernel-src
        cd kernel-src
        wget https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VERSION}.tar.xz
        tar -xf linux-${KERNEL_VERSION}.tar.xz
        cd ..
        echo "Kernel source downloaded and extracted"
      fi

    # 编译 Linux 内核并设置环境变量
    - |
      export QEMU_KERNEL_SRC="$(pwd)/kernel-src/linux-${KERNEL_VERSION}"
      export KERNEL_DIR="${QEMU_KERNEL_SRC}"
      export KERNEL_BINARY="${QEMU_KERNEL_SRC}/arch/x86/boot/bzImage"

      if [ ! -f "${KERNEL_BINARY}" ]; then
        echo "Building Linux kernel..."
        cd ${QEMU_KERNEL_SRC}
        make defconfig
        make -j$(nproc)
        cd -
      else
        echo "Kernel binary already exists."
      fi
      echo "KERNEL_DIR set to: ${KERNEL_DIR}"

    # Build CLI tool first with proper linking
    - echo "Building CLI tool..."
    - make cli
    
    # Build kernel module
    - echo "Building kernel module..."
    - make qemu-build
    
    # Create device nodes with sudo
    - echo "Creating device nodes with sudo..."
    - mkdir -p testenv/ci_init_fs/dev
    - sudo mknod testenv/ci_init_fs/dev/console c 5 1 || true
    - sudo mknod testenv/ci_init_fs/dev/tty0 c 4 0 || true
    - sudo mknod testenv/ci_init_fs/dev/tty1 c 4 1 || true
    - sudo mknod testenv/ci_init_fs/dev/null c 1 3 || true
    - echo "Device nodes created:"
    - ls -l testenv/ci_init_fs/dev/
    
    # Build initramfs using Makefile target with correct kernel path
    - echo "Building initramfs..."
    - export QEMU_KERNEL="$(pwd)/kernel-src/linux-${KERNEL_VERSION}/arch/x86/boot/bzImage"
    - make qemu-ci-test

  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - kernel-src/
      - build/
    policy: pull-push

  artifacts:
    paths:
      - kernel-src/linux-${KERNEL_VERSION}/
      - scripts/
      - artifacts/
      - build/
    expire_in: 1 week
  tags:
    - moeai
    - linux
  allow_failure: true

# QEMU test stage
qemu_test:
  stage: qemu-test
  needs:
    - build_module
  script:
    - set -e
    - echo "Starting QEMU test..."
    - export QEMU_KERNEL="$(pwd)/kernel-src/linux-${KERNEL_VERSION}/arch/x86/boot/bzImage"
    - export QEMU_INITRD="$(pwd)/scripts/qemu/initramfs.cpio.gz"

    - if [ ! -f "${QEMU_KERNEL}" ]; then echo "Error bzImage not found!"; exit 1; fi
    - if [ ! -f "${QEMU_INITRD}" ]; then echo "Error initramfs not found!"; exit 1; fi

    # 启动 QEMU（示例脚本，你可以替换成自己的 run_qemu.sh）
    - qemu-system-x86_64 -m 1024 -kernel "${QEMU_KERNEL}" -initrd "${QEMU_INITRD}" -append "rdinit=/init console=ttyS0" -nographic

    - echo "QEMU test completed."
  artifacts:
    paths:
      - artifacts/
    when: always
  tags:
    - moeai
    - linux
  allow_failure: true

# Documentation generation
generate_docs:
  stage: documentation
  script:
    - sudo apt-get install -y doxygen graphviz || true
    - doxygen Doxyfile || echo "Fallback Generating dummy docs"
    - mkdir -p docs/html
    - echo "<html><body><h1>MoeAI-C Documentation</h1></body></html>" > docs/html/index.html
  artifacts:
    paths:
      - docs/html
    expire_in: 1 month
  only:
    - master
  tags:
    - moeai
    - linux
  allow_failure: true

# Changelog generation (optional)
generate_changelog:
  stage: changelog
  script:
    - echo "Generating CHANGELOG (dummy placeholder)..."
    - echo "# MoeAI-C Changelog" > CHANGELOG
    - echo "" >> CHANGELOG
    - echo "## $(date +%Y-%m-%d)" >> CHANGELOG
    - git log --pretty=format:"* %s (%h)" -n 20 >> CHANGELOG
  artifacts:
    paths:
      - CHANGELOG
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  tags:
    - moeai
    - linux
  allow_failure: true

# GitLab Pages deployment
pages:
  stage: deploy
  dependencies:
    - generate_docs
  script:
    - mkdir -p public
    - cp -r docs/html/* public/
  artifacts:
    paths:
      - public
  only:
    - master
  tags:
    - moeai
    - linux
