#!/bin/bash
# MoeAI-C 项目配置工具
# 自动检测环境并配置项目

set -e

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
CONFIG_FILE="${PROJECT_ROOT}/.config.mk"
TESTENV_DIR="${PROJECT_ROOT}/testenv"

echo "==============================================="
echo " MoeAI-C Project Setup Tool"
echo "==============================================="
echo "Project directory: ${PROJECT_ROOT}"

# 确保脚本具有执行权限
chmod +x "${SCRIPT_DIR}/qemu/run_qemu.sh" 2>/dev/null || true
chmod +x "${SCRIPT_DIR}/qemu/gen_initramfs.sh" 2>/dev/null || true

# 检测内核源码
find_kernel_source() {
    echo "Detecting kernel source..."
    
    # 1. 检查当前运行的内核
    CURRENT_KERNEL="/lib/modules/$(uname -r)/build"
    if [ -d "$CURRENT_KERNEL" ] && [ -f "$CURRENT_KERNEL/Makefile" ]; then
        echo "Found current kernel source: $CURRENT_KERNEL"
        KERNEL_SRC="$CURRENT_KERNEL"
        return 0
    fi
    
    # 2. 检查常见位置
    echo "Searching common locations for kernel source..."
    for dir in /usr/src/linux* /usr/src/kernels/*; do
        if [ -d "$dir" ] && [ -f "$dir/Makefile" ]; then
            echo "Found kernel source: $dir"
            KERNEL_SRC="$dir"
            return 0
        fi
    done
    
    # 3. 在项目相对路径检查
    REL_KERNEL="../../linux-6.5.7"
    ABS_REL_KERNEL="$(cd "$PROJECT_ROOT" 2>/dev/null && cd .. && cd .. && pwd 2>/dev/null)/linux-6.5.7"
    if [ -d "$ABS_REL_KERNEL" ] && [ -f "$ABS_REL_KERNEL/Makefile" ]; then
        echo "Found relative path kernel source: $REL_KERNEL (resolved to $ABS_REL_KERNEL)"
        KERNEL_SRC="$ABS_REL_KERNEL"
        KERNEL_SRC_CONFIG="$REL_KERNEL"
        return 0
    fi
    
    echo "Warning: Kernel source not found!"
    return 1
}

# 检查必要的工具
check_tools() {
    echo "Checking required tools..."
    MISSING=0
    
    for tool in gcc make cpio gzip grep sed; do
        if ! command -v $tool &>/dev/null; then
            echo "Warning: Tool '$tool' not found"
            MISSING=1
        fi
    done
    
    # 检查QEMU
    if command -v qemu-system-x86_64 &>/dev/null; then
        QEMU_VERSION=$(qemu-system-x86_64 --version | head -n 1)
        echo "Found QEMU: $QEMU_VERSION"
    else
        echo "Warning: qemu-system-x86_64 not found, QEMU tests will not run"
        MISSING=1
    fi
    
    if [ $MISSING -eq 1 ]; then
        echo "Some required tools are missing, please install them first"
    else
        echo "All required tools are installed"
    fi
}

# 生成配置文件
generate_config() {
    echo "Generating config file..."
    
    # 创建或清空配置文件
    cat > "$CONFIG_FILE" << EOF
# MoeAI-C automated configuration file
# Generated by setup.sh in $(date)
# You can modify this file to customize your project settings

EOF
    
    # 添加内核源码路径
    if [ -n "$KERNEL_SRC" ]; then
        if [ -n "$KERNEL_SRC_CONFIG" ]; then
            echo "KERNEL_DIR=$KERNEL_SRC_CONFIG" >> "$CONFIG_FILE"
            echo "QEMU_KERNEL_SRC=$KERNEL_SRC_CONFIG" >> "$CONFIG_FILE"
        else
            echo "KERNEL_DIR=$KERNEL_SRC" >> "$CONFIG_FILE"
            echo "QEMU_KERNEL_SRC=$KERNEL_SRC" >> "$CONFIG_FILE"
        fi
    else
        echo "# Can's find kernel source, please set the path manually" >> "$CONFIG_FILE" 
        echo "#KERNEL_DIR=/path/to/kernel/source" >> "$CONFIG_FILE" 
        echo "#QEMU_KERNEL_SRC=/path/to/kernel/source" >> "$CONFIG_FILE"
    fi
    
    # 添加其他配置项
    cat >> "$CONFIG_FILE" << EOF

# Test environment settings
TESTENV_DIR = ${PROJECT_ROOT}/testenv
TESTENV_INITRAMFS_DIR = \$(TESTENV_DIR)/initramfs
TESTENV_INITRAMFS_IMAGE = \$(TESTENV_DIR)/initramfs.cpio.gz
MINIMAL_INITRAMFS = \$(TESTENV_DIR)/minimal_initramfs.cpio.gz

# Build settings
# CC=gcc
# EXTRA_CFLAGS=-O2 -Werror
EOF

    echo "Config file generated: $CONFIG_FILE"
}

# 准备初始环境
prepare_environment() {
    echo "Preparing project environment..."
    
    # 创建必要的目录
    mkdir -p "${PROJECT_ROOT}/build/bin" 2>/dev/null || true
    mkdir -p "${TESTENV_DIR}/initramfs" 2>/dev/null || true
    
    # 检查是否已编译内核模块
    if [ ! -f "${PROJECT_ROOT}/moeai.ko" ]; then
        echo "Warning: Kernel module not compiled yet! Please run 'make all' first"
        return
    fi
    
    # 创建最小化initramfs
        echo "Create minimal test environment? [y/N]"
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Creating minimal test environment..."
        cd "$PROJECT_ROOT"
        make qemu-minimal || echo "Warning: Failed to create minimal test environment, please check errors"
    fi
    
    # 询问是否运行CI测试
    echo "Run automated CI tests? [y/N]"
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Running CI tests..."
        cd "$PROJECT_ROOT"
        make qemu-ci-test || echo "Warning: CI tests failed, please check errors"
    fi
}

# 主程序流程
main() {
    check_tools
    find_kernel_source
    generate_config
    prepare_environment
    
    echo "==============================================="
    echo "Setup completed! You can now start using the project."
    echo
    echo "Suggested next steps:"
    if [ ! -f "${PROJECT_ROOT}/moeai.ko" ]; then
        echo "1. Compile kernel module: make all"
        echo "2. Build CLI tool: make cli"
        echo "3. Run QEMU tests: make qemu-test"
    else
        echo "1. Run QEMU tests: make qemu-test"
        echo "2. Run automated CI tests: make qemu-ci-test"
    fi
    echo "3. Clean test environment: make clean-test"
    echo "==============================================="
}

# 执行主程序
main
